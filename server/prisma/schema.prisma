// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  email     String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  password  String
  role      Role      @default(JOB_SEEKER)
  profile   Profile?
  jobPosts  JobPost[]

  verified           Boolean       @default(false)
  passwordResetToken String?
  passwordResetAt    DateTime?
  Application        Application[]
  sentMessage        Message[]     @relation("SentMessages")
  receivedMessage    Message[]     @relation("ReceivedMessages")
}

model Profile {
  id         Int     @id @default(autoincrement())
  profilePic String?
  username   String?
  biography  String? @db.Text()
  user       User    @relation(fields: [userId], references: [id])
  userId     String  @unique
}

model JobPost {
  id             Int           @id @default(autoincrement())
  company        String
  logo           String?
  logoBackground String?
  position       String
  postedAt       DateTime      @default(now())
  contract       String
  location       String
  website        String?
  apply          String?
  description    String?
  requirements   Json?
  role           Json?
  postedBy       User?         @relation(fields: [postedById], references: [id])
  postedById     String?
  Application    Application[]

  @@unique([id, postedById])
}

model Application {
  id             String   @id @default(uuid())
  applicantName  String?
  applicantEmail String
  resume         String?
  coverLetter    String?
  message        String?
  postedAt       DateTime @default(now())
  appliedBy      User     @relation(fields: [appliedById], references: [id])
  appliedById    String
  appliedTo      JobPost  @relation(fields: [appliedToId], references: [id])
  appliedToId    Int
  isSeen         Boolean  @default(false)

  @@unique([id, appliedById])
}

model Skill {
  id         String          @id @default(uuid())
  skillName  String
  categories SkillCategory[]
}

model SkillCategory {
  skillCategoryId   Int     @id
  skillCategoryName String
  skills            Skill[]
}

model Message {
  id         String   @id @default(uuid())
  content    String
  sender     User     @relation("SentMessages", fields: [senderId], references: [id])
  senderId   String
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  receiverId String
  createdAt  DateTime @default(now()) // Timestamp for when the message was created
}

enum Role {
  JOB_SEEKER
  EMPLOYER
  ADMIN
}
